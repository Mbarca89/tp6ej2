
package view;

import entity.DepositoProductos;
import entity.Producto;
import entity.Rubro;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import static javax.swing.ListSelectionModel.SINGLE_SELECTION;
import javax.swing.table.TableModel;

/**
 *
 * @author Nicolino Uchiha
 */
public class Getion_Productos extends javax.swing.JInternalFrame {

    private TreeSet<Producto> productos = new TreeSet<>();
    private DefaultTableModel modeloTabla;
    private boolean actualizando = false;
    private boolean creando = false;
    
    public Getion_Productos() {
        initComponents();
        configurarTabla();
        cargarRubros();
        
        modeloTabla = new DefaultTableModel(new Object[]{"codigo", "Descripcion", "Precio","Categoria","Stock"}, 0);
        tblProductos.setSelectionMode(SINGLE_SELECTION);
        tblProductos.setModel(modeloTabla);
        
        tblProductos.getSelectionModel().addListSelectionListener(event -> {
            int fila = tblProductos.getSelectedRow();
            if (fila == -1) {
               return;
            }
            deshabilitarTodo();
            TableModel modelo = tblProductos.getModel();
            Object codigo = modelo.getValueAt(fila,0);
            Object descripcion = modelo.getValueAt(fila,1);
            Object precio = modelo.getValueAt(fila,2);
            Object rubro = modelo.getValueAt(fila,3);
            Object stock = modelo.getValueAt(fila,4);
            
            txtCodigo.setText(String.valueOf(codigo));
            txtDescripcion.setText(String.valueOf(descripcion));
            txtPrecio.setText(String.valueOf(precio));
            cmbRubro.setSelectedItem(String.valueOf(rubro));
            jspStock.setValue(stock);
            
            btnActualizar.setEnabled(true);
            btnEliminar.setEnabled(true);
        });
        
        
        cmbFiltrarCategoria.removeAllItems();
        for (String r : Rubro.getRubros()) {
            cmbFiltrarCategoria.addItem(r);  
        }
        
        //estado inicial 
        btnGuardar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnActualizar.setEnabled(false);
        deshabilitarTodo();
    }
    
    private void cargarTabla(List<Producto> lista) {
    modeloTabla.setRowCount(0);
    
    for (Producto p : lista) {
        modeloTabla.addRow(new Object[]{
            p.getCodigo(),
            p.getDescripcion(),
            p.getPrecio(),
            p.getRubro(),
            p.getStock()
            });
        }
    }
    
    private void actualizarTabla() {
        String rubroSeleccionado = (String) cmbFiltrarCategoria.getSelectedItem();
        if (rubroSeleccionado != null) {
            // Creo una lista para los productos de ese rubro
            List<Producto> filtrados = new ArrayList<>();
        
        // Recorro todos los productos del dep√≥sito
        for (Producto p : DepositoProductos.listarTodos()) {
            if (p.getRubro().equalsIgnoreCase(rubroSeleccionado)) {
                filtrados.add(p);
            }
        }
        
        // Cargo los filtrados en la tabla
        cargarTabla(filtrados);
        }
    }
    
    public void deshabilitarTodo () {
        txtCodigo.setEnabled(false);
        txtDescripcion.setEnabled(false);
        txtPrecio.setEnabled(false);
        cmbRubro.setEnabled(false);
        txtPrecio.setEnabled(false);
        jspStock.setEnabled(false);
    }
    
     public void habilitarTodo () {
        txtCodigo.setEnabled(true);
        txtDescripcion.setEnabled(true);
        txtPrecio.setEnabled(true);
        cmbRubro.setEnabled(true);
        txtPrecio.setEnabled(true);
        jspStock.setEnabled(true);
    }
     
     public void limpiarCampos(){
         txtCodigo.setText(""); 
         txtDescripcion.setText(""); 
         txtPrecio.setText(""); 
         jspStock.setValue(0);   
         cmbRubro.setSelectedIndex(0);
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblSubtitulo = new javax.swing.JLabel();
        cmbFiltrarCategoria = new javax.swing.JComboBox<>();
        lblCodigo = new javax.swing.JLabel();
        scrTable = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        lblDescripcion = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        lblRubro = new javax.swing.JLabel();
        lblStock = new javax.swing.JLabel();
        cmbRubro = new javax.swing.JComboBox<>();
        txtPrecio = new javax.swing.JTextField();
        txtDescripcion = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        jspStock = new javax.swing.JSpinner();
        btnCerrar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitulo.setText("Gestion de Productos");

        lblSubtitulo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSubtitulo.setText("Filtrar por Categorias");

        cmbFiltrarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltrarCategoriaActionPerformed(evt);
            }
        });

        lblCodigo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCodigo.setText("Codigo: ");

        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Descripcion ", "Precio", "Categoria", "Stock"
            }
        ));
        scrTable.setViewportView(tblProductos);

        lblDescripcion.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDescripcion.setText("Descripcion: ");

        lblPrecio.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPrecio.setText("Precio: ");

        lblRubro.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRubro.setText("Rubro:");

        lblStock.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblStock.setText("Stock:");

        txtPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioActionPerformed(evt);
            }
        });

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });

        btnCerrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        btnNuevo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSubtitulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbFiltrarCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(187, 187, 187))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDescripcion)
                                    .addComponent(lblCodigo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDescripcion)
                                    .addComponent(txtCodigo)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPrecio)
                                    .addComponent(lblRubro)
                                    .addComponent(lblStock))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jspStock, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cmbRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(lblTitulo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(scrTable, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubtitulo)
                    .addComponent(cmbFiltrarCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrTable, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescripcion)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrecio)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRubro)
                    .addComponent(cmbRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStock)
                    .addComponent(jspStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCerrar))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
     this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
       if(btnNuevo.getText().equals("Nuevo")) {
            limpiarCampos();
            txtCodigo.requestFocus();
            btnGuardar.setEnabled(true);
            txtCodigo.setEnabled(true);
            txtDescripcion.setEnabled(true);
            txtPrecio.setEnabled(true);
            cmbRubro.setEnabled(true);
            txtPrecio.setEnabled(true);
            jspStock.setEnabled(true);
            tblProductos.clearSelection();
            btnNuevo.setText("Cancelar");
            btnActualizar.setEnabled(false);
            btnEliminar.setEnabled(false);
            creando=true;
       } else {
           limpiarCampos();
           deshabilitarTodo();
           btnNuevo.setText("Nuevo");
           btnGuardar.setEnabled(false);
       }
       
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void cmbFiltrarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltrarCategoriaActionPerformed
        String rubroSeleccionado = (String) cmbFiltrarCategoria.getSelectedItem();
    
        if (rubroSeleccionado != null) {
            // Creo una lista para los productos de ese rubro
            List<Producto> filtrados = new ArrayList<>();
        
        // Recorro todos los productos del dep√≥sito
        for (Producto p : DepositoProductos.listarTodos()) {
            if (p.getRubro().equalsIgnoreCase(rubroSeleccionado)) {
                filtrados.add(p);
            }
        }
        
        // Cargo los filtrados en la tabla
        cargarTabla(filtrados);
    }
    }//GEN-LAST:event_cmbFiltrarCategoriaActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if(creando){
            try {
                int codigo = Integer.parseInt(txtCodigo.getText().trim());
                String descripcion = txtDescripcion.getText().trim();
                double precio = Double.parseDouble(txtPrecio.getText().trim());
                int stock = (Integer) jspStock.getValue();
                String rubro = (String) cmbRubro.getSelectedItem();

                if (descripcion.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "La descripcion no puede estar vacia.");
                    txtDescripcion.requestFocus();
                    return;
                }

                Producto nuevo = new Producto(codigo, descripcion, precio, stock, rubro);
                DepositoProductos.altaProducto(nuevo);
                if (productos.add(nuevo)) {
                    JOptionPane.showMessageDialog(this, "Producto agregado correctamente.");
                    limpiarCampos();
                    deshabilitarTodo();
                    btnNuevo.setText("Nuevo");
                    btnGuardar.setEnabled(false);
                    actualizarTabla();
                } else {
                    JOptionPane.showMessageDialog(this, "Ya existe un producto con ese codigo.");
                }
                creando=false;
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Ingrese valores numericos validos.");
            }
        } else if(actualizando) {
            int fila = tblProductos.getSelectedRow();
            if (fila != -1) {
                try {
                    int codigo = Integer.parseInt(txtCodigo.getText().trim());
                    String descripcion = txtDescripcion.getText().trim();
                    double precio = Double.parseDouble(txtPrecio.getText().trim());
                    int stock = (Integer) jspStock.getValue();
                    String rubro = (String) cmbRubro.getSelectedItem();

                    Producto modificado = new Producto(codigo, descripcion, precio, stock, rubro);
                    boolean modified = DepositoProductos.modificarProducto(modificado);
                    
                    modeloTabla.setValueAt(codigo, fila, 0);
                    modeloTabla.setValueAt(descripcion, fila, 1);
                    modeloTabla.setValueAt(precio, fila, 2);
                    modeloTabla.setValueAt(rubro, fila, 3);
                    modeloTabla.setValueAt(stock, fila, 4);

                    if(modified) JOptionPane.showMessageDialog(this, "Producto modificado correctamente.");
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Error en valores numericos.");
                }
                actualizando=false;
                tblProductos.clearSelection();
                btnActualizar.setText("Actualizar");
                btnActualizar.setEnabled(false);
                limpiarCampos();
                deshabilitarTodo();
                btnGuardar.setEnabled(false);
                btnNuevo.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Seleccione un producto.");
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        btnGuardar.setEnabled(true);
        actualizando=true;
        if(btnActualizar.getText().equals("Actualizar")){
            btnActualizar.setText("Cancelar");
            btnNuevo.setEnabled(false);
            btnEliminar.setEnabled(false);
            txtDescripcion.setEnabled(true);
            txtPrecio.setEnabled(true);
            cmbRubro.setEnabled(true);
            txtPrecio.setEnabled(true);
            jspStock.setEnabled(true);
        } else {
            tblProductos.clearSelection();
            btnActualizar.setText("Actualizar");
            btnActualizar.setEnabled(false);
            limpiarCampos();
            deshabilitarTodo();
            btnGuardar.setEnabled(false);
            btnNuevo.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
       int fila = tblProductos.getSelectedRow();
    if (fila != -1) {
        int codigo = (int) modeloTabla.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "¬øEst√° seguro de eliminar el producto con c√≥digo " + codigo + "?",
            "Confirmar eliminaci√≥n",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (confirm == JOptionPane.YES_OPTION) {
            DepositoProductos.bajaProducto(codigo);
            modeloTabla.removeRow(fila);
            JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.");
            limpiarCampos();
            deshabilitarTodo();
            btnEliminar.setEnabled(false);
            btnActualizar.setEnabled(false);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un producto.");
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

  



private void configurarTabla() {
    DefaultTableModel modelo = new DefaultTableModel(
new Object[]{"C√≥digo", "Descripci√≥n", "Precio", "Rubro", "Stock"}, 0
) {
@Override
public boolean isCellEditable(int row, int col) {
return false;
}
};
        tblProductos.setModel(modelo);
    }

    private void cargarRubros() {
        cmbRubro.removeAllItems();
        for(String rubro : Rubro.getRubros()) {
            cmbRubro.addItem(rubro);
        };
    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<String> cmbFiltrarCategoria;
    private javax.swing.JComboBox<String> cmbRubro;
    private javax.swing.JSpinner jspStock;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblRubro;
    private javax.swing.JLabel lblStock;
    private javax.swing.JLabel lblSubtitulo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JScrollPane scrTable;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}


